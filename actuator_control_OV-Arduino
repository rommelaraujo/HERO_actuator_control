// Serial communication variables
int inByte = 0; //Signal from OV
////////////////////////////////

//Micro Switches pins
const int ms[4] = {12, 11, 10, 3};
          
///////////////////

bool flag_ms[4] = {false, false, false, false},
     flag_stim = false;

//Motor Shield
#define BRAKEVCC 0
#define PUSH   1
#define PULL  2
#define BRAKEGND 3
#define CS_THRESHOLD 100

#define PWM_MAX  255
#define PWM_HALF 127

/*  VNH2SP30 pin definitions
 xxx[0] controls '1' outputs
 xxx[1] controls '2' outputs */
int inApin[2] = {7, 4};  // INA: Clockwise input
int inBpin[2] = {8, 9}; // INB: Counter-clockwise input
int pwmpin[2] = {5, 6}; // PWM input
int cspin[2] = {2, 3}; // CS: Current sense ANALOG input
int enpin[2] = {0, 1}; // EN: Status of switches output (Analog pin)

int statpin = 13;

void setup()
{
  Serial.begin(9600);
  
  pinMode(statpin, OUTPUT);

  // Initialize digital pins as outputs
  for (int i=0; i<2; i++)
  {
    pinMode(inApin[i], OUTPUT);
    pinMode(inBpin[i], OUTPUT);
    pinMode(pwmpin[i], OUTPUT);
  }
  // Initialize braked
  for (int i=0; i<2; i++)
  {
    digitalWrite(inApin[i], LOW);
    digitalWrite(inBpin[i], LOW);
  }

  //MSs initialization
  for (int i = 0; i<4; i++){
    pinMode(ms[i], INPUT_PULLUP);
  }
  
  //Motor initialization
  for (int i = 0; i<2; i++){
    
    flag_ms[i] = digitalRead(ms[i]);
    if (flag_ms[i] == true){
            
        while (flag_ms[i] == true){
        flag_ms[i] = digitalRead(ms[i]);
        motorGo(i, PULL, 255);
        }
        motorGo(i, BRAKEVCC, 255);
    }
    else if (flag_ms[i] == false){
        motorGo(i, PUSH, 255);
        
        delay(1000);
        
        motorGo(i, BRAKEVCC, 255);
  
        delay(500);
        flag_ms[i] = digitalRead(ms[i]);
        while (flag_ms[i] == true){
        flag_ms[i] = digitalRead(ms[i]);
        motorGo(i, PULL, 255);
        }
  
        motorGo(i, BRAKEVCC, 255);  
    }
  }
}

void loop()
{
  if (Serial.available())
  {  
    inByte = Serial.read();   
        
    if (inByte == 0){
      for (int i = 0; i<2; i++){
               
        motorGo(i, BRAKEVCC, 255);
      }
      flag_stim = false;
    }
    else if (inByte == 1){

      for (int i=0; i<2; i++){
        flag_ms[i+2] = digitalRead(ms[i+2]);
        if (flag_ms[i+2] == true){
          motorGo(i, PUSH, 255);
        }
        else {
          motorGo(i, BRAKEVCC, 255);
        }
      }
      flag_stim = false;      
    }
    else if (inByte == 2 && flag_stim == false)
    { 
      flag_ms[0] = digitalRead(ms[0]);
      flag_ms[1] = digitalRead(ms[1]);
      while(flag_ms[0] == true || flag_ms[1] == true){
        for (int i=0; i<2; i++){
          
          flag_ms[i] = digitalRead(ms[i]);
          if (flag_ms[i] == true){
            motorGo(i, PULL, 255);
          }
          else {
            motorGo(i, BRAKEVCC, 255);
          }
        }
        flag_ms[0] = digitalRead(ms[0]);
        flag_ms[1] = digitalRead(ms[1]);
      }
      flag_stim = true; 
    }

      if ((analogRead(cspin[0]) < CS_THRESHOLD) && (analogRead(cspin[1]) < CS_THRESHOLD)){
        digitalWrite(statpin, HIGH);
      }
  }
}

void motorOff(int motor)
{
  // Initialize braked
  for (int i=0; i<2; i++)
  {
    digitalWrite(inApin[i], LOW);
    digitalWrite(inBpin[i], LOW);
  }
  analogWrite(pwmpin[motor], 0);
}

/* motorGo() will set a motor going in a specific direction
 the motor will continue going in that direction, at that speed
 until told to do otherwise.
 
 motor: this should be either 0 or 1, will selet which of the two
 motors to be controlled
 
 direct: Should be between 0 and 3, with the following result
 0: Brake to VCC
 1: Clockwise
 2: CounterClockwise
 3: Brake to GND
 
 pwm: should be a value between 0 and 255, higher the number, the faster
 it'll go
 */
void motorGo(uint8_t motor, uint8_t direct, uint8_t pwm)
{
  if (motor <= 1)
  {
    //analogWrite(enpin[motor],1023);
    if (direct <=4)
    {
      // Set inA[motor]
      if (direct <=1)
        digitalWrite(inApin[motor], HIGH);
      else
        digitalWrite(inApin[motor], LOW);

      // Set inB[motor]
      if ((direct==0)||(direct==2))
        digitalWrite(inBpin[motor], HIGH);
      else
        digitalWrite(inBpin[motor], LOW);

      analogWrite(pwmpin[motor], pwm);
    }
  }
}
